import unittest
from gauss import Gauss


class TestGauss(unittest.TestCase):
    def test_should_return_lower_matrix(self):
        matrix = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]

        expected = [
            [1., 0., 0.],
            [4., 1., 0.],
            [7., 2., 1.]
        ]
        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[0])

    def test_should_return_upper_matrix(self):
        matrix = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]

        expected = [
            [1., 2., 3.],
            [0., -3., -6.],
            [0., 0., 0.]
        ]
        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[1])

    def test_should_raise_value_error(self):
        matrix = [
            [1, 2, 3],
            [4, 5, 6]
        ]

        expected = ValueError

        gauss = Gauss()
        with self.assertRaises(expected):
            gauss.lu_decomposition(matrix)

    def test_should_return_ZeroDivisionError_when_10x10_and_not_invertable(self):
        matrix = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
            [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
            [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
            [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
            [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        ]

        expected = ZeroDivisionError

        gauss = Gauss()
        with self.assertRaises(expected):
            gauss.lu_decomposition(matrix)

    def test_should_return_L_matrix_when_10x10_and_invertible(self):
        matrix = [
            [2, 1, 3, 4, 5, 6, 7, 8, 9, 10],
            [1, 3, 2, 3, 4, 5, 6, 7, 8, 9],
            [3, 2, 2, 1, 3, 4, 5, 6, 7, 8],
            [4, 3, 1, 2, 2, 3, 4, 5, 6, 7],
            [5, 4, 3, 2, 3, 2, 3, 4, 5, 6],
            [6, 5, 4, 3, 2, 3, 2, 3, 4, 5],
            [7, 6, 5, 4, 3, 2, 3, 2, 3, 4],
            [8, 7, 6, 5, 4, 3, 2, 3, 2, 3],
            [9, 8, 7, 6, 5, 4, 3, 2, 3, 2],
            [10, 9, 8, 7, 6, 5, 4, 3, 2, 3]
        ]

        expected = [
            [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [1.5, 0.2, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [2.0, 0.4, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [2.5, 0.6, 1.846153846153846, 0.25, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [3.0, 0.8, 2.076923076923077, 0.25, 2.505376344086019, 1.0, 0.0, 0.0, 0.0, 0.0],
            [3.5, 1.0, 2.3076923076923075, 0.25, 2.892473118279568, 0.7461538461538464, 1.0, 0.0, 0.0, 0.0],
            [4.0, 1.2, 2.5384615384615383, 0.25, 3.2795698924731163, 0.8500000000000004, -0.41489361702128014, 1.0, 0.0,
             0.0],
            [4.5, 1.4, 2.769230769230769, 0.25, 3.6666666666666647, 0.9538461538461541, -0.4468085106383004,
             3.0185185185185044, 1.0, 0.0],
            [5.0, 1.6, 3.0, 0.25000000000000044, 4.0537634408602115, 1.0576923076923077, -0.4787234042553256,
             3.2962962962962856, 0.7492795389048976, 1.0]
        ]

        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[0])

    def test_should_return_U_matrix_when_10x10_and_invertible(self):
        matrix = [
            [2, 1, 3, 4, 5, 6, 7, 8, 9, 10],
            [1, 3, 2, 3, 4, 5, 6, 7, 8, 9],
            [3, 2, 2, 1, 3, 4, 5, 6, 7, 8],
            [4, 3, 1, 2, 2, 3, 4, 5, 6, 7],
            [5, 4, 3, 2, 3, 2, 3, 4, 5, 6],
            [6, 5, 4, 3, 2, 3, 2, 3, 4, 5],
            [7, 6, 5, 4, 3, 2, 3, 2, 3, 4],
            [8, 7, 6, 5, 4, 3, 2, 3, 2, 3],
            [9, 8, 7, 6, 5, 4, 3, 2, 3, 2],
            [10, 9, 8, 7, 6, 5, 4, 3, 2, 3]
        ]

        expected = [
            [2.0, 1.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0],
            [0.0, 2.5, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0],
            [0.0, 0.0, -2.6, -5.2, -4.8, -5.4, -6.0, -6.6, -7.2, -7.8],
            [0.0, 0.0, 0.0, 4.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
            [0.0, 0.0, 0.0, 0.0, -1.78846153846154, -4.48076923076923, -5.173076923076923, -5.865384615384617, -6.55769230769231, -7.25],
            [0.0, 0.0, 0.0, 0.0, 0.0, 5.591397849462352, 4.172043010752677, 4.752688172043001, 5.333333333333323, 5.913978494623638],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4461538461538437, -0.6000000000000036, -0.6461538461538447, -0.6923076923076961],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1489361702127736, -3.4680851063829823, -3.7872340425531963],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.425925925925894, 4.814814814814769],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4293948126801164]
        ]
        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[0])
