import unittest
from gauss import Gauss


class TestGauss(unittest.TestCase):
    def test_should_return_lower_matrix(self):
        matrix = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]

        expected = [
            [1., 0., 0.],
            [4., 1., 0.],
            [7., 2., 1.]
        ]
        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[0])

    def test_should_return_upper_matrix(self):
        matrix = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]

        expected = [
            [1., 2., 3.],
            [0., -3., -6.],
            [0., 0., 0.]
        ]
        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[1])

    def test_should_raise_value_error(self):
        matrix = [
            [1, 2, 3],
            [4, 5, 6]
        ]

        expected = ValueError

        gauss = Gauss()
        with self.assertRaises(expected):
            gauss.lu_decomposition(matrix)

    def test_should_return_ZeroDivisionError_when_10x10_and_not_invertable(self):
        matrix = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
            [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
            [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
            [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
            [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        ]

        expected = ZeroDivisionError

        gauss = Gauss()
        with self.assertRaises(expected):
            gauss.lu_decomposition(matrix)

    def test_should_return_L_matrix_when_10x10_and_invertible(self):
        matrix = [
            [2, 1, 3, 4, 5, 6, 7, 8, 9, 10],
            [1, 3, 2, 3, 4, 5, 6, 7, 8, 9],
            [3, 2, 2, 1, 3, 4, 5, 6, 7, 8],
            [4, 3, 1, 2, 2, 3, 4, 5, 6, 7],
            [5, 4, 3, 2, 3, 2, 3, 4, 5, 6],
            [6, 5, 4, 3, 2, 3, 2, 3, 4, 5],
            [7, 6, 5, 4, 3, 2, 3, 2, 3, 4],
            [8, 7, 6, 5, 4, 3, 2, 3, 2, 3],
            [9, 8, 7, 6, 5, 4, 3, 2, 3, 2],
            [10, 9, 8, 7, 6, 5, 4, 3, 2, 3]
        ]

        expected = [
            [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [1.5, 0.2, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [2.0, 0.4, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [2.5, 0.6, 1.846153846153846, 0.25, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [3.0, 0.8, 2.076923076923077, 0.25, 2.505376344086019, 1.0, 0.0, 0.0, 0.0, 0.0],
            [3.5, 1.0, 2.3076923076923075, 0.25, 2.892473118279568, 0.7461538461538464, 1.0, 0.0, 0.0, 0.0],
            [4.0, 1.2, 2.5384615384615383, 0.25, 3.2795698924731163, 0.8500000000000004, -0.41489361702128014, 1.0, 0.0,
             0.0],
            [4.5, 1.4, 2.769230769230769, 0.25, 3.6666666666666647, 0.9538461538461541, -0.4468085106383004,
             3.0185185185185044, 1.0, 0.0],
            [5.0, 1.6, 3.0, 0.25000000000000044, 4.0537634408602115, 1.0576923076923077, -0.4787234042553256,
             3.2962962962962856, 0.7492795389048976, 1.0]
        ]

        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[0])

    def test_should_return_U_matrix_when_10x10_and_invertible(self):
        matrix = [
            [2, 1, 3, 4, 5, 6, 7, 8, 9, 10],
            [1, 3, 2, 3, 4, 5, 6, 7, 8, 9],
            [3, 2, 2, 1, 3, 4, 5, 6, 7, 8],
            [4, 3, 1, 2, 2, 3, 4, 5, 6, 7],
            [5, 4, 3, 2, 3, 2, 3, 4, 5, 6],
            [6, 5, 4, 3, 2, 3, 2, 3, 4, 5],
            [7, 6, 5, 4, 3, 2, 3, 2, 3, 4],
            [8, 7, 6, 5, 4, 3, 2, 3, 2, 3],
            [9, 8, 7, 6, 5, 4, 3, 2, 3, 2],
            [10, 9, 8, 7, 6, 5, 4, 3, 2, 3]
        ]

        expected = [
            [2.0, 1.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0],
            [0.0, 2.5, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0],
            [0.0, 0.0, -2.6, -5.2, -4.8, -5.4, -6.0, -6.6, -7.2, -7.8],
            [0.0, 0.0, 0.0, 4.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
            [0.0, 0.0, 0.0, 0.0, -1.78846153846154, -4.48076923076923, -5.173076923076923, -5.865384615384617, -6.55769230769231, -7.25],
            [0.0, 0.0, 0.0, 0.0, 0.0, 5.591397849462352, 4.172043010752677, 4.752688172043001, 5.333333333333323, 5.913978494623638],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4461538461538437, -0.6000000000000036, -0.6461538461538447, -0.6923076923076961],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1489361702127736, -3.4680851063829823, -3.7872340425531963],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.425925925925894, 4.814814814814769],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4293948126801164]
        ]
        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[1])

    def test_should_return_L_matrix_when_10x10_and_negative(self):
        matrix = [
            [-2, -11, -3, -6, -5, -6, -7, -8, -9, -10],
            [-1, -3, -2, -3, -4, -5, -6, -7, -8, -9],
            [-3, -2, -2, -1, -3, -4, -5, -6, -7, -8],
            [-4, -3, -1, -2, -2, -3, -4, -5, -6, -7],
            [-5, -4, -3, -2, -3, -2, -3, -4, -5, -6],
            [-6, -5, -4, -3, -2, -3, -2, -3, -4, -5],
            [-7, -6, -5, -4, -3, -2, -3, -2, -3, -4],
            [-8, -7, -6, -5, -4, -3, -2, -3, -2, -3],
            [-9, -8, -7, -6, -5, -4, -3, -2, -3, -2],
            [-10, -9, -8, -7, -6, -5, -4, -3, -2, -3]
        ]

        expected = [
            [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0.5, 1., 0., 0., 0., 0., 0., 0., 0., 0.],
            [1.5, 5.8, 1., 0., 0., 0., 0., 0., 0., 0.],
            [2., 7.6, 1.6296296296296298, 1., 0., 0., 0., 0., 0., 0.],
            [2.5, 9.4, 1.7037037037037035, 0.2073170731707311, 1., 0., 0., 0., 0., 0.],
            [3., 11.2, 1.9629629629629628, 0.23170731707317022, 2.826771653543296, 1., 0., 0., 0., 0.],
            [3.5, 13., 2.222222222222222, 0.25609756097560876, 3.362204724409438, 0.8102564102564089, 1., 0., 0., 0.],
            [4., 14.8, 2.4814814814814814, 0.2804878048780485, 3.897637795275579, 0.946153846153846, -0.3749999999999967, 1., 0., 0.],
            [4.5, 16.6, 2.7407407407407405, 0.304878048780487, 4.4330708661417235, 1.0820512820512833, -0.39583333333332216, 2.8777777777777507, 1., 0.],
            [5., 18.4, 2.9999999999999996, 0.32926829268292557, 4.968503937007854, 1.2179487179487138, -0.41666666666667046, 3.155555555555541, 0.7478260869565242, 1.] 
        ]

        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[0])

    def test_should_return_U_matrix_when_10x10_and_negative(self):
        matrix = [
            [-2, -11, -3, -6, -5, -6, -7, -8, -9, -10],
            [-1, -3, -2, -3, -4, -5, -6, -7, -8, -9],
            [-3, -2, -2, -1, -3, -4, -5, -6, -7, -8],
            [-4, -3, -1, -2, -2, -3, -4, -5, -6, -7],
            [-5, -4, -3, -2, -3, -2, -3, -4, -5, -6],
            [-6, -5, -4, -3, -2, -3, -2, -3, -4, -5],
            [-7, -6, -5, -4, -3, -2, -3, -2, -3, -4],
            [-8, -7, -6, -5, -4, -3, -2, -3, -2, -3],
            [-9, -8, -7, -6, -5, -4, -3, -2, -3, -2],
            [-10, -9, -8, -7, -6, -5, -4, -3, -2, -3]
        ]

        expected = [
            [-2.0, -11.0, -3.0, -6.0, -5.0, -6.0, -7.0, -8.0, -9.0, -10.0],
            [0., 2.5, -0.5, 0., -1.5, -2.0, -2.5, -3.0, -3.5, -4.0],
            [0., 0., 5.4, 8., 13.2, 16.6, 20.0, 23.4, 26.8, 30.2],
            [0., 0., 0., -3.037037037037038, -2.1111111111111143, -2.8518518518518583, -3.5925925925925952, -4.333333333333336, -5.074074074074083, -5.814814814814817],
            [0., 0., 0., 0., 1.548780487804884, 4.109756097560975, 4.670731707317076, 5.2317073170731785, 5.792682926829267, 6.353658536585374],
            [0., 0., 0., 0., 0., -6.141732283464518, -4.629921259842469, -5.11811023622044, -5.60629921259836, -6.094488188976332],
            [0., 0., 0., 0., 0., 0., -1.4769230769230774, 0.6666666666666758, 0.8102564102564207, 0.953846153846154],
            [0., 0., 0., 0., 0., 0., 0., 1.2500000000000093, 3.75000000000002, 4.250000000000002],
            [0., 0., 0., 0., 0., 0., 0., 0., -6.388888888888838, -5.022222222222131],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., -1.4886956521738957]
        ]
        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[1])    

    def test_should_return_L_matrix_when_10x10_with_decimal_places(self):
        matrix = [
            [-2.4657, 5.4232, 7.8206, 1.8510, 8.5971, -4.6574, -85.4593, 78.6032, 9.4502, -3.8541],
            [1.8510, -2.4657, 7.8206, -85.4593, 78.6032, 5.4232, 9.4502, -3.8541, 8.5971, -4.6574],
            [8.5971, 5.4232, -2.4657, 78.6032, 9.4502, -4.6574, 1.8510, -85.4593, 7.8206, -3.8541], 
            [78.6032, -85.4593, 8.5971, -2.4657, -3.8541, 7.8206, 5.4232, -4.6574, 1.8510, 9.4502],
            [7.8206, 9.4502, 78.6032, -4.6574, 5.4232, 8.5971, 1.8510, -2.4657, -85.4593, -3.8541],
            [-3.8541, -2.4657, 8.5971, -85.4593, 7.8206, 5.4232, 78.6032, -4.6574, 9.4502, 1.8510],
            [8.5971, 78.6032, -85.4593, -4.6574, -2.4657, -3.8541, 1.8510, 9.4502, 7.8206, 5.4232],
            [-4.6574, -4.6574, 1.8510, 78.6032, 8.5971, 7.8206, 5.4232, -85.4593, -3.8541, 9.4502],
            [-3.8541, 7.8206, 5.4232, -2.4657, -85.4593, 78.6032, -4.6574, -2.4657, 1.8510, 8.5971], 
            [8.5971, -85.4593, -2.4657, 7.8206, 5.4232, -3.8541, 1.8510, 9.4502, 78.6032, -4.6574]
        ]

        expected = [
            [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [-0.7507, 1., 0., 0., 0., 0., 0., 0., 0., 0.],
            [-3.4867, 15.1556, 1., 0., 0., 0., 0., 0., 0., 0.],
            [-31.8787, 54.4537, 2.6691, 1., 0., 0., 0., 0., 0., 0.],
            [-3.1718, 16.6000, 0.6780, 0.4721, 1., 0., 0., 0., 0., 0.],
            [1.5631, -6.8157, 0.4909, 0.0059, 0.7007, 1., 0., 0., 0., 0.],
            [-3.4867, 60.7365, 4.8701, -1.5014, 12.4554, 20.7229, 1., 0., 0., 0.],
            [1.8889, -9.2813, -0.6248, 0.1431, -3.1047, -5.2892, -0.1257, 1., 0., 0.],
            [1.5631, -0.4088, 0.0066, -0.0484, 2.2159, 0.8125, 0.7610, -4.3282, 1., 0.],
            [-3.4867, -41.4516, -3.2421, 0.9299, -9.7377, -14.7591, -0.7259, 2.4949, -0.2048, 1.]
        ]

        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[0])

    def test_should_return_U_matrix_when_10x10_with_decimal_places(self):
        matrix = [
            [-2.4657, 5.4232, 7.8206, 1.8510, 8.5971, -4.6574, -85.4593, 78.6032, 9.4502, -3.8541],
            [1.8510, -2.4657, 7.8206, -85.4593, 78.6032, 5.4232, 9.4502, -3.8541, 8.5971, -4.6574],
            [8.5971, 5.4232, -2.4657, 78.6032, 9.4502, -4.6574, 1.8510, -85.4593, 7.8206, -3.8541], 
            [78.6032, -85.4593, 8.5971, -2.4657, -3.8541, 7.8206, 5.4232, -4.6574, 1.8510, 9.4502],
            [7.8206, 9.4502, 78.6032, -4.6574, 5.4232, 8.5971, 1.8510, -2.4657, -85.4593, -3.8541],
            [-3.8541, -2.4657, 8.5971, -85.4593, 7.8206, 5.4232, 78.6032, -4.6574, 9.4502, 1.8510],
            [8.5971, 78.6032, -85.4593, -4.6574, -2.4657, -3.8541, 1.8510, 9.4502, 7.8206, 5.4232],
            [-4.6574, -4.6574, 1.8510, 78.6032, 8.5971, 7.8206, 5.4232, -85.4593, -3.8541, 9.4502],
            [-3.8541, 7.8206, 5.4232, -2.4657, -85.4593, 78.6032, -4.6574, -2.4657, 1.8510, 8.5971], 
            [8.5971, -85.4593, -2.4657, 7.8206, 5.4232, -3.8541, 1.8510, 9.4502, 78.6032, -4.6574]
        ]

        expected = [
            [-2.4657, 5.4232, 7.8206, 1.8510, 8.5971, -4.6574, -85.4593, 78.6032, 9.4502, -3.8541],
            [0., 1.6055, 13.6915, -84.0698, 85.0570, 1.9269, -54.7041, 55.1533, 15.6914, -7.5507],
            [0., 0., -182.7003, 1359.18054, -1249.6608, -50.0994, 532.9522, -647.2738, -197.0408, 97.1425],
            [0., 0., 0., 1006.65409, -1025.9832, -111.8570, -1162.5727, 1225.4493, -25.4190, 38.4650],
            [0., 0., 0., 0., -47.6138, 48.6141, 826.3955, -808.3870, -170.3679, 25.2406],
            [0., 0., 0., 0., 0., -32.1669, -471.2721, 489.8874, 123.4207, -13.8104],
            [0., 0., 0., 0., 0., 0., -1841.5969, 1842.8026, -447.1850, 7.0566],
            [0., 0., 0., 0., 0., 0., 0., 11.1770, 77.3918, 8.0457],
            [0., 0., 0., 0., 0., 0., 0., 0., 945.2912, -2.5037],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., -25.4107]
        ]
        gauss = Gauss()
        self.assertEqual(expected, gauss.lu_decomposition(matrix)[1])

    def test_should_return_list_of_elements_when_two_tuples_given(self):
        first = (3, 5)
        second = (8, 9)
        gauss = Gauss()
        self.assertEqual([[3, 8], [5, 9]], gauss.manual_zip(first, second))

    def test_should_return_list_of_elements_when_two_tuples_given_first_longer(self):
        first = (3, 6, 9)
        second = (8, 9)
        gauss = Gauss()
        self.assertEqual([[3, 8], [6, 9]], gauss.manual_zip(first, second))

    def test_should_return_list_of_elements_when_two_tuples_given_second_longer(self):
        first = (3, 6)
        second = (8, 9, 400)
        gauss = Gauss()
        self.assertEqual([[3, 8], [6, 9]], gauss.manual_zip(first, second))
